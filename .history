1 + 1
1 + 1
1
t2
:type t2
let t2 = let f = (\x -> x) in let g = (f True) in f 3
let t1 = (\f -> let g = (f True) in f 3) (\x -> x)
:type compose
let compose f g x = f (g x)
let t = let f = (\x -> x) in let g = (f True) in f 3
let f = (\x -> x) in let g = (f True) in f 3
(\f -> let g = (f True) in (f 3)) (\x -> x)
:type compose
let compose f g x = f (g x)
:type compose
let compose f g x = f (g x)
let add x y z = x + y + z
:type compose
let compose f g x = f (g x)
:type id
let id x = x
